#!/usr/bin/perl

=head1 NAME

mmtool - build helper

=head1 SYNOPSIS

B<mmtool> I<COMMAND>|B<help>|B<man> [I<ARGS>]

=head1 DESCRIPTION

build helper

=cut

use strict;
use warnings;
use feature 'say';

use FindBin qw($Bin $Script);
use lib "$Bin/blib", "$Bin/lib";

use File::Which;
use Pod::Usage;

use HWDATA::PCI;
our $pmversion = version->parse($HWDATA::PCI::VERSION)->normal;

our $quiet = $ENV{QUIET};
our $debug = $ENV{DEBUG};

our $commands = {
    configure => \&mmtool_configure,
    changelog => \&mmtool_changelog,
    make      => \&mmtool_make,
    release   => \&mmtool_release,
    clean     => \&mmtool_clean,
    help      => sub { pod2usage(-verbose => 1) },
    man       => sub { pod2usage(-verbose => 2) },
};


################################################################################
################################################################################

chdir $Bin;
@ARGV or pod2usage;

die unless -d    '.git';
die unless which 'git';
die unless which 'git-changelog';

my $cmd = shift @ARGV;
$commands->{$cmd}?$commands->{$cmd}(@ARGV):die;

################################################################################
################################################################################
################################################################################
################################################################################

sub dprint {
    return unless $debug;
    my ($P, $F, $L) = caller;
    my $S = [caller(1)]->[3]||$P;
    my $pfx = qq[${F}($L)($S)];
    @_ = ('#'x8) unless @_;
    for (@_) {
        my @lines = split "\n", $_;
        say STDERR "$pfx $_" for (@lines);
    }
}

sub qsay        { say join(' ', "[$Script]", @_) unless $quiet}
sub qsay_qx     { qsay(@_) && return qx(@_) }
sub qsay_system { qsay(@_) && system(@_) }

sub mmtool_configure { dprint; qsay_system(qw'perl Makefile.PL', @_) && die }
sub mmtool_changelog { dprint; git_changelog('CHANGELOG')            || die }
sub mmtool_make      { dprint; qsay_system('make', @_)               && die }
sub mmtool_release   { dprint; mmtool_make('dist')                   && die }
sub mmtool_clean     { dprint; qsay_system(qw'git clean -xdf')       && die }

sub git_changelog {
    dprint;
    my $outfile = shift;
    my @changelog = qsay_qx('git-changelog --all --no-merges --prune-old --stdout');
    die if $?;
    writefile($outfile, @changelog);
}

sub writefile {
    dprint;
    my $outfile = shift;
    open( my $fh, '>', $outfile ) or die;
    print $fh $_ for @_;
    close $fh or die;
}

sub appendfile {
    dprint;
    my $outfile = shift;
    open( my $fh, '>>', $outfile ) or die;
    print $fh $_ for @_;
    close $fh or die;
}

sub touchfile {
    dprint;
    my $outfile = shift;
    appendfile($outfile);
}

if ($debug) {
    qsay_system qq(pod2html $Script > ${Script}.1.html);
    qsay_system qq(pod2man $Script > ${Script}.1);
    qsay_system qq(groff -man ${Script}.1 > ${Script}.1);
}

__END__

## Documentation style-guides:
## + man-pages(7)
## + perlpod(1)
## + Pod::Usage(3)

=head1 ARGUMENTS

=head2 Commands

=over

=item B<configure> [I<ARGS>]

Equivalent to C<< perl Makefile.PL I<ARGS> >>

=item B<changelog>

=item B<make> [I<ARGS>]

=item B<release>

=item B<clean>

=item B<help>

=item B<man>

=back

=head1 ENVIRONMENT

=over

=item B<QUIET>=0|1

=item B<DEBUG>=0|1

=back

=head1 NOTES

=over

=item Disable L<ExtUtils::MakeMaker> CPAN cruft per
      L<[1]|/https://metacpan.org/pod/ExtUtils::MakeMaker>

   perl Makefile.PL NO_META=1 NO_MYMETA=1

=item Build for Fedora/RedHat per
      L<[3]|/https://fedoraproject.org/wiki/Perl/Tips>

   perl Makefile.PL INSTALLDIRS=vendor NO_PACKLIST=1 NO_PERLLOCAL=1

=back

=head1 SEE ALSO

=over

=item [1] L<https://metacpan.org/pod/ExtUtils::MakeMaker>

=item [2] L<https://docs.fedoraproject.org/en-US/packaging-guidelines/Perl/>

=item [3] L<https://fedoraproject.org/wiki/Perl/Tips>

=item [4] L<https://semver.org/>

=back

=cut


################################################################################
################################################################################
# sub git_log_pretty {
#     my $tag = shift;
#     my $range = shift;
#     my $tag_version = version->parse($tag)->normal;
#     my $tag_date = qx(git log -1 --pretty="format:%cs");
#     say qq(${tag_version}\t${tag_date});
#     say qx(git log --no-merges --pretty="format:  + %s" ${range});
# }
# sub writeCHANGELOG {
#     return unless ( -d ".git" );
#     return unless which "git";
#     return unless which "git-changelog";
#     ## all git tags
#     my @git_tags = qx(git tag --list);
#     chomp @git_tags;
#     my $git_tag_re = qr(v?\d\.\d\.\d);
#     my %version_tags;
#     my %tag_versions;
#     for ( grep { m/^${git_tag_re}$/ } @git_tags ) {
#         my $normal_version = version->parse($_)->normal;
#         $version_tags{$normal_version} = $_;
#         $tag_versions{$_} = $normal_version;
#     }
#     #print Dumper \%version_tags, \%tag_versions;
#     my $changelog;
#     if ($version_tags{$pmversion}) {
#         # say "$pmversion is tagged $version_tags{$pmversion}";
#         $changelog = qx(git-changelog --stdout --no-merges --final-tag $version_tags{$pmversion});
#     } else {
#         # say "$pmversion is not tagged";
#         $changelog = qx(git-changelog --stdout --no-merges -a --tag $pmversion);
#     }
#     for my $line (split(/\n/, $changelog)) {
#         if ($line =~ m/^(${git_tag_re})\s/) {
#             my $tag = $1;
#             my $version = $tag_versions{$1};
#             $line =~ s/^$tag/$version/;
#         }
#         say $line
#     }
#     # ## generate changelog for each version-tag
#     # my @git_describe = split('-', qx(git describe));
#     # chomp @git_describe;
#     # print Dumper \@git_describe;
#     # my $to_tag = $git_describe[0];
#     # for my $from_version ( sort { version->parse($b) <=> version->parse($a) } keys %version_tags) {
#     #     my $from_tag = %version_tags{$from_version};
#     #     next if ($from_tag eq $to_tag);
#     #     git_log_pretty($to_tag, "${from_tag}..${to_tag}");
#     #     $to_tag = $from_tag;
#     # }
#     # git_log_pretty($to_tag, $to_tag);
# }
################################################################################
################################################################################
